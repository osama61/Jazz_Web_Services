name: Selenide Test Automation

on:
  # Trigger on push or PR to main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Schedule to run tests 3 times a day at 8 AM, 12 PM, and 4 PM UTC
  schedule:
    - cron: '0 8,12,16 * * *'

jobs:
  test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for tests

    # Cache dependencies to speed up build process
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Cache Maven dependencies (or Gradle dependencies if using Gradle)
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Set up JDK (make sure to use the correct Java version, here using Java 11)
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adoptopenjdk'

      # Build the project using Maven (or Gradle if you're using it)
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Run the tests
      - name: Run Selenide tests
        run: mvn test
        env:
          API_KEY: ${{ secrets.API_KEY }}  # Example of using secrets like API_KEY

      # Upload test results (JUnit reports or Allure)
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: target/test-classes  # Modify based on your test report output location

      # Generate Allure Report (optional)
      - name: Generate Allure report
        run: |
          allure serve target/allure-results  # You need to have Allure installed for this step
        continue-on-error: true  # Allow workflow to continue even if this step fails

    # Optionally, add notifications on success/failure (e.g., via Slack or email)
    notifications:
      on_failure:
        - name: Send Slack notification
          uses: some-slack-action
          with:
            slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    # Matrix for running tests on different browsers (optional)
    matrix:
      browser: [chrome, firefox]
    strategy:
      matrix:
        browser: [chrome, firefox]  # Run tests on both Chrome and Firefox

      steps:
        - name: Set up Selenium WebDriver for ${{ matrix.browser }}
          run: |
            # Custom setup for different browsers
            # Add your WebDriver installation here (e.g., ChromeDriver, GeckoDriver)
          continue-on-error: true
